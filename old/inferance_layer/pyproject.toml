[project]
name = "chronotick-inference"
version = "0.1.0"
description = "ChronoTick Inference Layer - ML-powered clock drift prediction using TSFM foundation models"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "ChronoTick Team" }
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pyyaml>=6.0",
    "psutil>=5.9.0",
    "loguru>=0.7.0",
    "rich>=13.0.0",
    "packaging>=21.0",
]

[project.optional-dependencies]
# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
]

# Development dependencies  
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.0.0",
]

# TSFM model environments (mutually exclusive - install one at a time)
tsfm-core = [
    "torch>=2.0.0",
    "transformers>=4.52.0",
    # Mock TSFM dependencies for demonstration
    # "chronos-forecasting>=1.0.0",
    # "timesfm>=1.0.0",
]

tsfm-ttm = [
    "torch>=2.0.0", 
    "transformers==4.38.0",
    # "chronos-forecasting>=1.0.0",
    # "timesfm>=1.0.0",
    # "granite-tsfm @ git+https://github.com/ibm-granite/granite-tsfm.git",
]

tsfm-toto = [
    "torch>=2.0.0",
    "transformers>=4.52.0", 
    # "chronos-forecasting>=1.0.0",
    # "timesfm>=1.0.0",
    # "toto-ts>=0.1.0",
]

tsfm-time-moe = [
    "torch>=2.0.0",
    "transformers==4.40.1",
    # "chronos-forecasting>=1.0.0", 
    # "timesfm>=1.0.0",
]

[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["chronotick_inference"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "gpu: Tests requiring GPU",
    "network: Tests requiring network access",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning", 
    "ignore::FutureWarning",
]

[tool.black]
line-length = 100
target-version = ['py310']

[tool.ruff]
line-length = 100
target-version = "py310"
select = ["E", "W", "F", "I"]
ignore = ["E501"]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true

[tool.coverage.run]
source = ["chronotick_inference"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]